module ControlFSM(clk, reset, instr, flags, selectA, selectB,Opcode, we_a, we_b, pc_en, ld_pc_en, ld_mux_en, pc_mux, RE, fl_en);
input clk, reset;
input [4:0] flags; 
input [15:0] instr;

output reg [3:0] selectA, selectB;
output reg [7:0] Opcode;
output reg [15:0] RE;


reg [9:0] addr;
reg [3:0] state,next_state;
reg Z, L, N, C, F;
output reg we_a, we_b, pc_en,ld_pc_en,ld_mux_en,pc_mux, fl_en;
wire [15:0] result, q_a, q_b;
wire [4:0] flags;

parameter ADD = 8'b00000101;
parameter ADDU = 8'b00000110;
parameter ADDC = 8'b00000111;
parameter SUB = 8'b00001001;
parameter CMP = 8'b00001011;
parameter AND = 8'b00000001;
parameter OR = 8'b00000010;
parameter XOR = 8'b00000011;
parameter STORE = 8'b01000100;
parameter LOAD = 8'b01000000;
parameter ADDIMM = 4'b0101;
parameter SUBI = 4'b1001;
parameter LSH = 8'b10000100; 
parameter RSH = 8'b10000110; 
parameter JUMP = 8'b01001000;
parameter BEQ = 8'b00000100; 
parameter BLT = 8'b00001000;

always@(posedge clk)begin
	
	N = flags[0];
	Z = flags[1];
	F = flags[2];
	L = flags[3];
	C = flags[4];

	
	if(reset)begin
		state = 4'b0000;
	end else case(state)
	
	4'b0000: begin 
		if({instr[15:12], instr[7:4]} == ADD)
		begin
			state = 4'b0010;
		end else if({instr[15:12]} == ADDIMM)
		begin
			state = 4'b0010;
		end  else if({instr[15:12]} == SUBI)
		begin
			state = 4'b0010;
		end else if({instr[15:12], instr[7:4]} == SUB)
		begin
			state = 4'b0010;
		end else if({instr[15:12], instr[7:4]} == CMP)
		begin
			state = 4'b1000;
		end else if({instr[15:12], instr[7:4]} == AND)
		begin
			state = 4'b0010;
		end else if({instr[15:12], instr[7:4]} == OR)
		begin
			state = 4'b0010;
		end else if({instr[15:12], instr[7:4]} == XOR)
		begin
			state = 4'b0010;
		end else if({instr[15:12], instr[7:4]} == ADDU)
		begin
			state = 4'b0010;
		end else if({instr[15:12], instr[7:4]} == LSH)
		begin
			state = 4'b0010;
		end else if({instr[15:12], instr[7:4]} == RSH)
		begin
			state = 4'b0010;
		end else if({instr[15:12], instr[7:4]} == JUMP)
		begin
			state = 4'b0111;
		end else if({instr[15:12], instr[7:4]} == STORE)
		begin
			state = 4'b0011;
		end else if({instr[15:12], instr[7:4]} == LOAD)
		begin 
			state = 4'b0101;
		end else if({instr[15:12], instr[7:4]} == BEQ)
		begin 
			state = 4'b1001;
		end else if({instr[15:12], instr[7:4]} == BLT)
		begin 
			state = 4'b1100;
		end else begin
			state = 4'b0000;
			end 
	end 
	
	4'b0010:begin 
			state = 4'b0001;
	end 
	
	
	4'b0011:begin
			state = 4'b0100;
	end 
	
	4'b0100:begin
			state = 4'b0001;
	end 
	
	4'b0101:begin
			state = 4'b0110;
	end 
	
	4'b0110:begin
			state = 4'b0001;
	end
	
	4'b0111:begin
			state = 4'b0001;
	end 
	
	4'b1000:begin
			state = 4'b0001;
	end 
	
	//BEQ
	4'b1001:begin
			if(Z == 1'b1)begin
				state = 4'b0111;
			end else begin
				state = 4'b1010;
			end 
	end 
	//BLT
	4'b1100:begin
			if(L == 1'b1)begin
				state = 4'b0111;
			end else begin
				state = 4'b1010;
			end
	end 
	
	4'b1010:begin
			state= 4'b0001;
	end 

	default:state = 4'b0000;
	endcase 
end  


always@(state) begin 
	
	case(state)
	4'b0000:begin 
		we_a = 0;
		we_b = 0;
		pc_en = 0;
		ld_pc_en = 0;
		ld_mux_en = 0;
		pc_mux = 1;
		RE = 0;
		selectA = 0; 
		selectB = 0;
		Opcode = 0;
		fl_en = 0;
	end 
	
	4'b0001:begin
		we_a = 0;
		we_b = 0;
		pc_en = 0;
		ld_pc_en = 0;
		ld_mux_en = 0;
		pc_mux = 1;
		RE = 0;
		selectA = 0; 
		selectB = 0;
		Opcode = 0;
		fl_en = 0;
	
	end 
	//reg to reg
	4'b0010:begin
			pc_en = 1;
			selectA = instr[3:0];
			selectB = instr[11:8];
			RE[selectB] = 1;
			Opcode = {instr[15:12], instr[7:4]} ;
	end
	
	
	//store
	4'b0011:begin
			pc_en = 0;
			we_a = 1;
			pc_mux = 0;
			selectA = instr[3:0];
			selectB = instr[11:8];
	end 
	
	4'b0100:begin
				pc_mux = 1;
				we_a = 0;
				pc_en = 1;
	end 
	
	//load 
	4'b0101:begin
			pc_en = 0;
			pc_mux = 0;
			selectA = instr[3:0];
			selectB = instr[11:8];
			we_a = 0;
			ld_mux_en = 1;
	end 
	4'b0110:begin
			pc_mux = 1;
			RE[selectB] = 1;
			pc_en = 1;
	end 
	

	//jump
	4'b0111:begin
		pc_en = 1;
		ld_pc_en = 1;
		selectA = instr[3:0];
	end 
	
	
	//CMP
	4'b1000:begin
			pc_en = 1;
			fl_en = 1;
			selectA = instr[3:0];
			selectB = instr[11:8];
			Opcode = {instr[15:12], instr[7:4]};
	end 
	
	//BEQ
	4'b1001:begin			
			selectA = instr[3:0];
	end 
	
	4'b1010:begin
			pc_en = 1;
	end 
	
	4'b1100:begin
			selectA = instr[3:0];
	end 
	
	default: begin 
		we_a = 0;
		we_b = 0;
		pc_en = 0;
		ld_pc_en = 0;
		ld_mux_en = 0;
		pc_mux = 0;
		RE = 0;
		selectA = 0; 
		selectB = 0;
		Opcode = 0;
	end 
	endcase 
end 














endmodule 